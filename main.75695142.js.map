{"version":3,"sources":["scripts/main.js"],"names":["board","startButton","document","querySelector","startMessage","loseMessage","winMessage","gameStarted","score","rows","columns","moveLeft","moveRight","moveUp","moveDown","setGame","r","c","fieldCell","createElement","classList","add","id","updateFieldCell","append","cellValue","innerText","value","resetGame","remove","getElementById","hasEmptyFieldCell","addRandomCell","randomRowIndex","Math","floor","random","randomColumnIndex","randomFieldCell","toString","randomCellValue","arraysAreEqual","arr1","arr2","length","i","clearZeroes","row","filter","Boolean","slide","newRow","push","slideLeft","slideLeftAndRight","slideRight","slideUp","slideUpAndDown","slideDown","direction","isAnyCellMoved","prevRow","reverse","gameIsOver","hasNoEmptyCells","move","isWinner","window","onload","addEventListener","e","code","contains","innerHTML"],"mappings":"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","file":"main.75695142.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable max-len */\n'use strict';\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nlet gameStarted = false;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nlet board;\n\nconst moveLeft = 'ArrowLeft';\nconst moveRight = 'ArrowRight';\nconst moveUp = 'ArrowUp';\nconst moveDown = 'ArrowDown';\n\nwindow.onload = function() {\n  setGame();\n};\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const fieldCell = document.createElement('div');\n\n      fieldCell.classList.add('field-cell');\n      fieldCell.id = `${r}-${c}`;\n\n      const cellValue = board[r][c];\n\n      updateFieldCell(fieldCell, cellValue);\n      document.querySelector('.game-field').append(fieldCell);\n    }\n  }\n\n  gameStarted = false;\n};\n\nfunction updateFieldCell(fieldCell, cellValue) {\n  fieldCell.innerText = '';\n  fieldCell.classList.value = '';\n  fieldCell.classList.add('field-cell');\n\n  if (cellValue > 0) {\n    fieldCell.innerText = cellValue;\n    fieldCell.classList.add(`field-cell--${cellValue}`);\n  }\n};\n\ndocument.addEventListener('keydown', (e) => {\n  if (!gameStarted) {\n    return;\n  }\n\n  switch (e.code) {\n    case moveLeft:\n      return slideLeft();\n    case moveRight:\n      return slideRight();\n    case moveUp:\n      return slideUp();\n    case moveDown:\n      return slideDown();\n  }\n\n  document.querySelector('.game-score').innerText = score;\n\n  if (gameIsOver()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (isWinner()) {\n    winMessage.classList.remove('hidden');\n  }\n});\n\nstartButton.addEventListener('click', () => {\n  if (!startButton.classList.contains('start')) {\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.innerText = 'Start';\n    gameStarted = false;\n    resetGame();\n  } else {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.innerHTML = 'Restart';\n    startMessage.classList.add('hidden');\n    gameStarted = true;\n    addRandomCell();\n    addRandomCell();\n  }\n});\n\nfunction resetGame() {\n  score = 0;\n  document.querySelector('.game-score').innerText = score;\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startMessage.classList.remove('hidden');\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const fieldCell = document.getElementById(`${r}-${c}`);\n\n      updateFieldCell(fieldCell, 0);\n    }\n  }\n}\n\nfunction hasEmptyFieldCell() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addRandomCell() {\n  if (!hasEmptyFieldCell) {\n    return;\n  }\n\n  while (true) {\n    const randomRowIndex = Math.floor(Math.random() * rows);\n    const randomColumnIndex = Math.floor(Math.random() * columns);\n\n    if (board[randomRowIndex][randomColumnIndex] === 0) {\n      const randomFieldCell = document.getElementById(randomRowIndex.toString() + '-' + randomColumnIndex.toString());\n      const randomCellValue = Math.random() >= 0.1 ? 2 : 4;\n\n      board[randomRowIndex][randomColumnIndex] = randomCellValue;\n      randomFieldCell.innerText = randomCellValue;\n      randomFieldCell.classList.add(`field-cell--${randomCellValue}`);\n      break;\n    }\n  }\n}\n\nfunction arraysAreEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction clearZeroes(row) {\n  return row.filter(Boolean);\n}\n\nfunction slide(row) {\n  let newRow = clearZeroes(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = clearZeroes(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  slideLeftAndRight('left');\n}\n\nfunction slideRight() {\n  slideLeftAndRight('right');\n}\n\nfunction slideUp() {\n  slideUpAndDown('up');\n}\n\nfunction slideDown() {\n  slideUpAndDown('down');\n}\n\nfunction slideLeftAndRight(direction) {\n  let isAnyCellMoved = false;\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n    const prevRow = [...row];\n\n    if (direction === 'right') {\n      row.reverse();\n    }\n\n    row = slide(row);\n\n    if (direction === 'right') {\n      row.reverse();\n    }\n    board[r] = row;\n\n    if (!arraysAreEqual(prevRow, row)) {\n      isAnyCellMoved = true;\n    }\n\n    for (let c = 0; c < columns; c++) {\n      const fieldCell = document.getElementById(`${r}-${c}`);\n      const cellValue = board[r][c];\n\n      updateFieldCell(fieldCell, cellValue);\n    }\n  }\n\n  if (isAnyCellMoved) {\n    addRandomCell();\n  }\n}\n\nfunction slideUpAndDown(direction) {\n  let isAnyCellMoved = false;\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const prevRow = [...row];\n\n    if (direction === 'down') {\n      row.reverse();\n    }\n    row = slide(row);\n\n    if (direction === 'down') {\n      row.reverse();\n    }\n\n    if (!arraysAreEqual(prevRow, row)) {\n      isAnyCellMoved = true;\n    }\n\n    for (let r = 0; r < columns; r++) {\n      board[r][c] = row[r];\n\n      const fieldCell = document.getElementById(`${r}-${c}`);\n      const cellValue = board[r][c];\n\n      updateFieldCell(fieldCell, cellValue);\n    }\n  }\n\n  if (isAnyCellMoved) {\n    addRandomCell();\n  }\n}\n\nfunction gameIsOver() {\n  const hasNoEmptyCells = !hasEmptyFieldCell();\n  let move = true;\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (c > 0 && board[r][c] === board[r][c - 1]) {\n        move = false;\n        break;\n      }\n\n      if (c < columns - 1 && board[r][c] === board[r][c + 1]) {\n        move = false;\n        break;\n      }\n\n      if (r < rows - 1 && board[r][c] === board[r + 1][c]) {\n        move = false;\n        break;\n      }\n\n      if (r > 0 && board[r][c] === board[r - 1][c]) {\n        move = false;\n        break;\n      }\n    }\n  }\n\n  return move && hasNoEmptyCells;\n}\n\nfunction isWinner() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}